Create a beautiful, interactive HTML page to display this response.

Original Question: {original_question}
Response Data: {response_data}
Response Type: {intent_type}
{custom_instruct}
Create a COMPLETE HTML page with embedded CSS and JavaScript. The page should be:
1. Visually appealing and modern
2. Responsive and mobile-friendly
3. Interactive where appropriate
4. Easy to read and understand

IMPORTANT: If custom presentation instructions are provided above, they take PRIORITY over the default guidelines below. Apply the custom instructions first, then use the default guidelines to fill in any gaps.

Style Guidelines based on content type:

FOR GAME IMPLEMENTATIONS (Tetris, Snake, Pong, etc.):
- USE p5.js library by including: <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.7.0/p5.min.js"></script>
- Create a playable game using p5.js canvas
- Include game controls instructions (keyboard/mouse)
- Add score display and game state (playing/paused/game over)
- Use retro styling with pixel fonts if appropriate
- Implement smooth animations and collision detection
- Add sound effects using p5.js sound capabilities if needed
- Make the canvas responsive to window size
- Include start/pause/restart buttons

FOR WEATHER RESPONSES:
- Use weather icons (you can use emoji or create SVG)
- Show temperature prominently with large, readable fonts
- Use colors that match the weather (blue for cold, orange for warm, grey for cloudy)
- Add subtle animations (like floating clouds or pulsing sun)
- Include all weather details in cards or sections

FOR CALCULATIONS:
- Display the calculation process step by step
- Use large, clear typography for numbers
- Add a calculator-style interface if appropriate
- Use animations to show the calculation happening

FOR DATA/INFORMATION:
- Use cards, sections, or accordions for different pieces of information
- Include icons or emojis to make it more visual
- Add smooth transitions and hover effects
- Use a clean, professional layout

FOR ERRORS:
- Use friendly error messages with helpful icons
- Suggest alternatives or next steps
- Keep the tone positive and helpful

General Requirements:
- Use modern CSS (flexbox, grid, gradients, shadows)
- Add smooth transitions and subtle animations
- Include hover effects where appropriate
- Make it feel premium and polished
- Use a cohesive color scheme
- Add a subtle background pattern or gradient

SPECIAL INSTRUCTIONS FOR GAMES:
When the response mentions creating a game (like Tetris, Snake, Pong, etc.), you MUST:
1. Include p5.js library in the HTML head
2. Create a fully functional, playable game
3. Use the p5.js setup() and draw() functions
4. Implement proper game mechanics and physics
5. Add keyboard/mouse controls with on-screen instructions
6. Include score tracking and display
7. Add game states (start screen, playing, game over)
8. Make it fun and engaging!

IMPORTANT FOR KEYBOARD CONTROLS:
If your game or interactive demo uses arrow keys or other keyboard controls:
- The parent modal already handles preventing page scroll, so DO NOT add preventDefault() in your code
- Focus on implementing smooth and responsive keyboard controls
- For p5.js games, use the built-in keyPressed() and keyIsDown() functions
- Ensure proper game speed control (not running at 60 FPS) for playability
- Add clear visual feedback when keys are pressed
- Consider adding both arrow keys and WASD support for better accessibility

Return ONLY the complete HTML code starting with <!DOCTYPE html> and ending with </html>.
Include ALL CSS in <style> tags and ALL JavaScript in <script> tags within the HTML.